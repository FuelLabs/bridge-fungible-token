/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface FuelMessageOutboxInterface extends ethers.utils.Interface {
  functions: {
    "ETH_DECIMALS()": FunctionFragment;
    "FUEL_BASE_ASSET_DECIMALS()": FunctionFragment;
    "MAX_MESSAGE_DATA_SIZE()": FunctionFragment;
    "MESSAGE_INBOX()": FunctionFragment;
    "getFuelBaseAssetDecimals()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "s_defaultMessagePredicate()": FunctionFragment;
    "s_messageNonce()": FunctionFragment;
    "sendETH(bytes32)": FunctionFragment;
    "sendMessage(bytes32,bytes)": FunctionFragment;
    "sendMessageWithOwner(bytes32,bytes32,bytes)": FunctionFragment;
    "setDefaultMessagePredicate(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdrawETH(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ETH_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FUEL_BASE_ASSET_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_MESSAGE_DATA_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MESSAGE_INBOX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFuelBaseAssetDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_defaultMessagePredicate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_messageNonce",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sendETH", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessageWithOwner",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultMessagePredicate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ETH_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FUEL_BASE_ASSET_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_MESSAGE_DATA_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MESSAGE_INBOX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFuelBaseAssetDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_defaultMessagePredicate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_messageNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessageWithOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultMessagePredicate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "SentMessage(bytes32,bytes32,bytes32,uint64,uint64,bytes)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SentMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class FuelMessageOutbox extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FuelMessageOutboxInterface;

  functions: {
    ETH_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ETH_DECIMALS()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    FUEL_BASE_ASSET_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    "FUEL_BASE_ASSET_DECIMALS()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MAX_MESSAGE_DATA_SIZE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_MESSAGE_DATA_SIZE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    MESSAGE_INBOX(overrides?: CallOverrides): Promise<[string]>;

    "MESSAGE_INBOX()"(overrides?: CallOverrides): Promise<[string]>;

    getFuelBaseAssetDecimals(overrides?: CallOverrides): Promise<[number]>;

    "getFuelBaseAssetDecimals()"(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    s_defaultMessagePredicate(overrides?: CallOverrides): Promise<[string]>;

    "s_defaultMessagePredicate()"(overrides?: CallOverrides): Promise<[string]>;

    s_messageNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    "s_messageNonce()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    sendETH(
      recipient: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sendETH(bytes32)"(
      recipient: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendMessage(
      recipient: BytesLike,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sendMessage(bytes32,bytes)"(
      recipient: BytesLike,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendMessageWithOwner(
      recipient: BytesLike,
      owner: BytesLike,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sendMessageWithOwner(bytes32,bytes32,bytes)"(
      recipient: BytesLike,
      owner: BytesLike,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultMessagePredicate(
      newMessagePredicate: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setDefaultMessagePredicate(bytes32)"(
      newMessagePredicate: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawETH(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawETH(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ETH_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  "ETH_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

  FUEL_BASE_ASSET_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  "FUEL_BASE_ASSET_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_MESSAGE_DATA_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_MESSAGE_DATA_SIZE()"(overrides?: CallOverrides): Promise<BigNumber>;

  MESSAGE_INBOX(overrides?: CallOverrides): Promise<string>;

  "MESSAGE_INBOX()"(overrides?: CallOverrides): Promise<string>;

  getFuelBaseAssetDecimals(overrides?: CallOverrides): Promise<number>;

  "getFuelBaseAssetDecimals()"(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pause()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  s_defaultMessagePredicate(overrides?: CallOverrides): Promise<string>;

  "s_defaultMessagePredicate()"(overrides?: CallOverrides): Promise<string>;

  s_messageNonce(overrides?: CallOverrides): Promise<BigNumber>;

  "s_messageNonce()"(overrides?: CallOverrides): Promise<BigNumber>;

  sendETH(
    recipient: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sendETH(bytes32)"(
    recipient: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendMessage(
    recipient: BytesLike,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sendMessage(bytes32,bytes)"(
    recipient: BytesLike,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendMessageWithOwner(
    recipient: BytesLike,
    owner: BytesLike,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sendMessageWithOwner(bytes32,bytes32,bytes)"(
    recipient: BytesLike,
    owner: BytesLike,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultMessagePredicate(
    newMessagePredicate: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setDefaultMessagePredicate(bytes32)"(
    newMessagePredicate: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unpause()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawETH(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawETH(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ETH_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    "ETH_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

    FUEL_BASE_ASSET_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    "FUEL_BASE_ASSET_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_MESSAGE_DATA_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_MESSAGE_DATA_SIZE()"(overrides?: CallOverrides): Promise<BigNumber>;

    MESSAGE_INBOX(overrides?: CallOverrides): Promise<string>;

    "MESSAGE_INBOX()"(overrides?: CallOverrides): Promise<string>;

    getFuelBaseAssetDecimals(overrides?: CallOverrides): Promise<number>;

    "getFuelBaseAssetDecimals()"(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    s_defaultMessagePredicate(overrides?: CallOverrides): Promise<string>;

    "s_defaultMessagePredicate()"(overrides?: CallOverrides): Promise<string>;

    s_messageNonce(overrides?: CallOverrides): Promise<BigNumber>;

    "s_messageNonce()"(overrides?: CallOverrides): Promise<BigNumber>;

    sendETH(recipient: BytesLike, overrides?: CallOverrides): Promise<void>;

    "sendETH(bytes32)"(
      recipient: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sendMessage(
      recipient: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendMessage(bytes32,bytes)"(
      recipient: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sendMessageWithOwner(
      recipient: BytesLike,
      owner: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendMessageWithOwner(bytes32,bytes32,bytes)"(
      recipient: BytesLike,
      owner: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultMessagePredicate(
      newMessagePredicate: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDefaultMessagePredicate(bytes32)"(
      newMessagePredicate: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;

    withdrawETH(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdrawETH(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Paused(account: null): TypedEventFilter<[string], { account: string }>;

    SentMessage(
      sender: BytesLike | null,
      recipient: BytesLike | null,
      owner: null,
      nonce: null,
      amount: null,
      data: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, string],
      {
        sender: string;
        recipient: string;
        owner: string;
        nonce: BigNumber;
        amount: BigNumber;
        data: string;
      }
    >;

    Unpaused(account: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    ETH_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    "ETH_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

    FUEL_BASE_ASSET_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    "FUEL_BASE_ASSET_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_MESSAGE_DATA_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_MESSAGE_DATA_SIZE()"(overrides?: CallOverrides): Promise<BigNumber>;

    MESSAGE_INBOX(overrides?: CallOverrides): Promise<BigNumber>;

    "MESSAGE_INBOX()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFuelBaseAssetDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    "getFuelBaseAssetDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    s_defaultMessagePredicate(overrides?: CallOverrides): Promise<BigNumber>;

    "s_defaultMessagePredicate()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    s_messageNonce(overrides?: CallOverrides): Promise<BigNumber>;

    "s_messageNonce()"(overrides?: CallOverrides): Promise<BigNumber>;

    sendETH(
      recipient: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sendETH(bytes32)"(
      recipient: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendMessage(
      recipient: BytesLike,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sendMessage(bytes32,bytes)"(
      recipient: BytesLike,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendMessageWithOwner(
      recipient: BytesLike,
      owner: BytesLike,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sendMessageWithOwner(bytes32,bytes32,bytes)"(
      recipient: BytesLike,
      owner: BytesLike,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultMessagePredicate(
      newMessagePredicate: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setDefaultMessagePredicate(bytes32)"(
      newMessagePredicate: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawETH(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawETH(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETH_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ETH_DECIMALS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FUEL_BASE_ASSET_DECIMALS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "FUEL_BASE_ASSET_DECIMALS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_MESSAGE_DATA_SIZE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MAX_MESSAGE_DATA_SIZE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MESSAGE_INBOX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MESSAGE_INBOX()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFuelBaseAssetDecimals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFuelBaseAssetDecimals()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    s_defaultMessagePredicate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "s_defaultMessagePredicate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_messageNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "s_messageNonce()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendETH(
      recipient: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sendETH(bytes32)"(
      recipient: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendMessage(
      recipient: BytesLike,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sendMessage(bytes32,bytes)"(
      recipient: BytesLike,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendMessageWithOwner(
      recipient: BytesLike,
      owner: BytesLike,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sendMessageWithOwner(bytes32,bytes32,bytes)"(
      recipient: BytesLike,
      owner: BytesLike,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultMessagePredicate(
      newMessagePredicate: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setDefaultMessagePredicate(bytes32)"(
      newMessagePredicate: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawETH(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
